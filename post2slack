#!/usr/bin/env python3
import os
import sys
import argparse
import urllib.request
import urllib.parse


def main():
    args = define_parsers()
    varidation(args)

    # Format text
    text = ""

    if args.message != "":
        # Coming row string like r"\\n"
        text += args.message.replace('\\n', '\n') + "\n"

    attachments = []
    color = "danger" if args.error else args.color

    stdin = sys.stdin.read()

    if stdin != "":
        if color != "":
            attachment = {
                'color': color,
                'text': stdin
            }
            attachments.append(attachment)

        else:
            text += "```{0}```".format(stdin)

    post_data = {
        'channel': args.channel,
        "link_names": 1,
        'username': args.user,
        'text': text,
        'attachments': attachments,
        'icon_emoji': args.emoji
    }

    if text != "" or len(attachments) != 0:
        post(args.webhook_url, post_data)
    else:
        print("Input stdin or --message arg")


def post(url, body):
    encoded_post_data = urllib.parse.urlencode({"payload": body}).encode(encoding='ascii')
    urllib.request.urlopen(url=url, data=encoded_post_data)


def varidation(args):
    if args.webhook_url is None:
        print("Set WEBHOOK_URL")
        exit(1)

    if args.channel is None:
        print("Set CHANNEL")
        exit(1)

    if not args.emoji.startswith(":") or not args.emoji.endswith(":"):
        print("Emoji needs to be surrounded by \":\" like :ghost:")
        exit(1)


def define_parsers():
    parser = argparse.ArgumentParser(description='Post stdin to slack ',
                                     add_help=False)
    parser.add_argument('--help', action='help', help='help')

    parser.add_argument('-u', '--user', type=str, default="webhookbot",
                        help='Username')
    parser.add_argument('-m', "--message", type=str, default="",
                        help='Add message on beginning part')
    parser.add_argument("--emoji", type=str, default=":ghost:",
                        help='Emoji')
    parser.add_argument("--color", type=str, default="",
                        help='Set color to stdin message')
    parser.add_argument("-e", "--error", dest="error", action='store_true',
                        help='Error message')
    parser.set_defaults(error=False)
    parser.add_argument("--channel", type=str, default=os.environ.get('CHANNEL', ""),
                        help='Slack channel. Default CHANNEL')
    parser.add_argument("--webhook-url", type=str, default=os.environ.get('WEBHOOK_URL', ""),
                        help='Slack webhook url. Default WEBHOOK_URL')

    return parser.parse_args()


if __name__ == "__main__":
    exit(main())
